{"pageProps":{"postData":{"id":"bash_completion","href":{"pathname":"/blog/[year]/[month]/[day]/[slug]","query":{"year":"2018","month":"01","day":"08","slug":"bash_completion"}},"person":{"name":"Chris Pfohl","current":true,"title":"Senior Engineer & Data Engineer","image":"/img/people/chris.png","bio":"Chris is an expert data mover, munger, and analyzer. He builds robust third\nparty integrations, answers tough questions with data, and brings order to\ndatabases and applications to empower new features and higher reliability.\n\n\nChris loves to share his expertise with newer developers through code\nreview, teaching, and good documentation. He also loves writing code that's\nhard to use wrong and creating tools that empower his team to deliver faster\nand more reliably. He was drawn to programming, and contract work in\nparticular because of his deep love of learning, solving problems, and\nsharing that knowledge.\n","bio_short":"A master data mover and analyzer, Chris crafts robust integrations and sorts\nthrough complexity with ease. He loves sharing his expertise through code review,\nteaching, and rock-solid documentation.\n"},"contentHtml":"<p>Every developer should have at least a basic mastery of their command line. I&#8217;d argue\nthat part of that mastery is to develop a set of customizations they take with them\nwherever they go. These customizations should make things you do all the time faster.\nObviously there are diminshing returns here<sup><a id=\"footnote-ref-2\" href=\"#footnote-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>.</p>\n<p>Some of my customizations include bash aliases for my most used git commands. <code>ga</code> is\nshort for <code>git add</code>, <code>gap</code> is short for <code>git add -p</code>, etc. I also like to have a\nsyntax highlighted <code>cat</code> and <code>less</code> available to me using <a href=\"http://pygments.org/\">Pygments</a>.</p>\n<p>Today I added something I&#8217;ve wanted for a long time: a <code>cd</code> that works relative to\nthe directory I do most of my development work in. Now I can run <code>cdx subdir_of_x</code>\nand it will take me to <code>~/x/subdir_of_x</code>.</p>\n<p>You may be wondering &#8220;Why use precious kilobytes of storage and hours of time writing\nthis up!?&#8221; And you&#8217;d be corect. By itself, this is not worthy of a blog post.\nI, however, also added autocompletion for the contents of that directory, and <em>that</em>\nis worth writing about.</p>\n<p>What follows is a short tutorial on bash autocompletion and a tiny bit of bash programming\ninformation. It assumes you have a working knowledge of programming, and at least passing\nfamiliarity with your terminal.</p>\n<h2 id=\"the-function\">The Function</h2>\n<p>In and of itself, this a very easy function<sup><a id=\"footnote-ref-1\" href=\"#footnote-1\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup> to write. In your <code>~/.bashrc</code> add:</p>\n<pre><code>function cdx {\n    cd &quot;$HOME/x/$1&quot;\n}\n</code></pre><p>My first test looked like this:</p>\n<pre><code>cdx my_code  &lt;TAB&gt;  _base\n</code></pre><p>No autocomplete, just big gaping tabs in the middle of my command. What&#8217;s an enterprising\ndeveloper<sup><a id=\"footnote-ref-4\" href=\"#footnote-4\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup> to do? Spend the morning figuring it out, of course.</p>\n<h2 id=\"the-code\">The Code</h2>\n<p>First, the good stuff. All together, when placed in your <code>~/.bashrc</code> and <code>source</code>ed,\nthe following works for hypothetical directory <code>x</code> in your home directory using the new\ncommand <code>cdx</code>:</p>\n<pre><code>function cdx {\n    cd &quot;$HOME/x/$1&quot;\n}\nfunction _cdx {\n    local cur opts\n\n    opts=&quot;$(ls -1 ~/x)&quot;\n    cur=&quot;${COMP_WORDS[COMP_CWORD]}&quot;\n\n    COMPREPLY=( $(compgen -W &quot;${opts}&quot; -- ${cur}) )\n    return 0\n}\ncomplete -F _cdx cdx\n</code></pre><p>To make it work:</p>\n<ol>\n<li>Insert this in <code>~/.bashrc</code>.</li>\n<li>Replace all instances of &#8220;x&#8221; with a directory from your <code>$HOME</code> directory.</li>\n<li>Call <code>source ~/.bashrc</code>.</li>\n</ol>\n<p>You may want to rename <code>cdx</code> with a more intuitive name (for Apsis code, for example,\nI&#8217;d use <code>cda</code> and <code>_cda</code>).</p>\n<h2 id=\"the-explanation\">The Explanation</h2>\n<p>Now to break the <code>_cdx</code> function down. When it gets obvious feel free to skip to the end, I&#8217;ve\nattempted to order this from most specific to broadest bash knowledge. (In order of <em>my</em> current\nknowledge of bash). I&#8217;ve left the most basic stuff (like explaining <code>ls</code>) out.</p>\n<ol>\n<li><p><code>complete -F _cdx cdx</code> is how you let bash know to attempt an autocomplete. In English it&#8217;s:</p>\n<blockquote>\n<p>When I run the cdx command please use the function _cdx to autocomplete the command.</p>\n</blockquote>\n</li>\n<li><p><code>compgen -W &quot;${opts}&quot; -- ${cur}</code> is the function that searches an array of possibilities (<code>-W</code>)\nfor the text after <code>--</code>. It&#8217;s pretty rigid: no fuzzy searching, no autocorrecting. It just returns\n&#8220;things from the array that start with what you typed.&#8221; You are free to replace it with\nwhatever you want as long as it too returns an array (space separated string) of the options.\nIn English:</p>\n<blockquote>\n<p>Please give me all the words in the string &#8216;opts&#8217; that start with what&#8217;s in &#8216;cur&#8217;.</p>\n</blockquote>\n</li>\n<li><p><code>COMPREPLY</code> is basically the return value of this function. Whatever array you return here will be\npresented to you on the command line as options for autocompletion. In English:</p>\n<blockquote>\n<p>Here&#8217;s what I want to pick from when autocompleting with the current inputs.</p>\n</blockquote>\n</li>\n<li><p><code>cur=&quot;${COMP_WORDS[COMP_CWORD]}&quot;</code> is setting <code>cur</code> to the last word on the command line. <code>COMP_WORDS</code>\nand <code>COMP_CWORD</code> are the inputs to this function. (You can actually make them real bash function\nparameters if you want to, but they&#8217;re already acceptably named). They are special bash variables\nthat are only available in completion functions. <code>COMP_WORDS</code> is the array of strings currently\nentered on the command line. <code>COMP_CWORDS</code> is the current length of the <code>COMP_WORDS</code> array. In English:</p>\n<blockquote>\n<p>Set the variable &#8216;cur&#8217; to the last word on the command line.</p>\n</blockquote>\n</li>\n<li><p><code>opts=&quot;$(ls -1 ~/x)&quot;</code> is where we set the available options by creating an array (space separated string)\nfrom the output of <code>ls -1 ~/x</code>. This gets used in the <code>compgen</code> command. In English:</p>\n<blockquote>\n<p>Set &#8220;opts&#8221; to the output of &#8220;ls -1 ~/x&#8221; as the list of potential options to autocomplete from.</p>\n</blockquote>\n</li>\n<li><p><code>local cur opts</code> is a declaration of the cur and opts variables. By using <code>local</code> we avoid cluttering\nthe global variable namespace. In English:</p>\n<blockquote>\n<p>I&#8217;m going to use the cur and opts variables. You can forget them when this function ends.</p>\n</blockquote>\n</li>\n<li><p><code>return 0</code> quits the function and sets the bash exit code. <code>0</code> is success, all other values are failures.\nThis is useful in other bash scripts when you want to use it with <code>&amp;&amp;</code> <code>||</code>. Here it simply informs bash\nthat the completion script was successful. In English:</p>\n<blockquote>\n<p>IT WORKED! Show the user the values in &#8220;COMPREPLY&#8221;!</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"improvements\">Improvements</h2>\n<p>This is a great start, and super useful as is, but there is more that could be done:</p>\n<ol>\n<li><p>Going deeper: it&#8217;d be nice if I could keep autocompleting deeper into the directory, so <code>cdx ydir/zdi</code>\ncould autocomplete to <code>~/x/ydir/zdir</code>. This would involve making the <code>opts=</code> line more intelligent.</p>\n</li>\n<li><p>Fuzzy searching: I am great at typos. It&#8217;d be nice if I could replace <code>compgen</code> with something more\nintelligent that will ignore small typos.</p>\n</li>\n<li><p>More generic: Being able to match <code>cda</code> or <code>cdb</code> to switch to subdirectories of <code>~/apsis</code> or <code>~/bread</code>\nwould be nice. Writing a script to handle the unique cases when bash fires up would be easily doable.\nIt would, however, require separate autocomplete functions for each named function becuase <code>complete</code>\nonly accepts literal command names.</p>\n</li>\n</ol>\n<h2 id=\"troubleshootingfurther-reading\">Troubleshooting/Further Reading</h2>\n<p>If the above doesn&#8217;t work it&#8217;s possible your <code>progcomp</code> bash option isn&#8217;t set. You can check with:</p>\n<p><code>echo $BASHOPTS | grep -q progcomp &amp;&amp; echo &quot;YES&quot; || echo &quot;NO&quot;</code></p>\n<p>By default it&#8217;s set, but if for whatever reason it&#8217;s not, and you didn&#8217;t knowingly do it yourself, you can set it\nwith <code>shopt -s progcomp</code>. That can be added to your <code>.bashrc</code>.</p>\n<p>If that&#8217;s not the problem, you will have to debug this the old fashioned way. Use <code>echo &quot;$VARNAME&quot;</code> to see the values\nof variables. Finally you may want to read the docs.</p>\n<p>I didn&#8217;t initially suggest reading the docs because, unfortunately, the documentation for anything contained in the\nbash man pages is terribly undiscoverable, difficult to search, and not always easy to read <sup><a id=\"footnote-ref-3\" href=\"#footnote-3\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup>. All of the above\nis in the bash man pages. Here&#8217;s how you can find the relevant docs:</p>\n<ul>\n<li><code>man bash</code> to open the documentation for bash itself.</li>\n<li>Press <code>/</code> to start searching.</li>\n<li>Once you&#8217;ve entered your search term hit &#8220;Enter&#8221; and then use <code>n</code> and <code>N</code> to search forward and backwards\n(respectively) for the content you want.</li>\n<li>You&#8217;ll want the following search terms:<ul>\n<li>&#8220;Programming Completion&#8221; for an overview of completion in bash.</li>\n<li>&#8220;compgen&#8221; for the function that we use to match input with the search term.</li>\n<li>&#8220;complete&#8221; for the function used to tell bash to use programmable completion for a given command.</li>\n</ul>\n</li>\n</ul>\n<p>Update: After completing my first draft of this post, Niall pointed me to the far more readable and digestible <a href=\"http://www.tldp.org/LDP/abs/html/tabexpansion.html\">TLDP</a>.</p>\n<h2 id=\"in-closing\">In Closing</h2>\n<p>Bash Programmable Autocompletion is powerful, but intimidating at first. Hopefully this post helps you get started.\nIf you build something awesome write it up and ping us on twitter! We&#8217;re <a href=\"https://twitter.com/apsislabs\">@ApsisLabs</a>.</p>\n<section class=\"footnotes\" data-footnotes>\n<h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"footnote-2\">\n<p><a href=\"https://xkcd.com/1205/\">xkcd is relevant here</a> <a href=\"#footnote-ref-2\" data-footnote-backref aria-label=\"Back to reference 2\">↩</a></p>\n</li>\n<li id=\"footnote-1\">\n<p>Couldn&#8217;t use an alias, because aliases can&#8217;t interpolate arguments, they&#8217;re strictly dumb text replacements , and they always include a space at the end. <a href=\"#footnote-ref-1\" data-footnote-backref aria-label=\"Back to reference 1\">↩</a></p>\n</li>\n<li id=\"footnote-4\">\n<p>One with a head cold, limited exposure to bash internals like autocomplete, and more important work to accomplish. <a href=\"#footnote-ref-4\" data-footnote-backref aria-label=\"Back to reference 4\">↩</a></p>\n</li>\n<li id=\"footnote-3\">\n<p>Man pages, as useful as they are, are dinosaurs <a href=\"https://unix.stackexchange.com/a/18161/34182\">from a prehistoric time before hypertext was invented</a>. You can&#8217;t follow bolded text as if they were links. <a href=\"#footnote-ref-3\" data-footnote-backref aria-label=\"Back to reference 3\">↩</a></p>\n</li>\n</ol>\n</section>\n","layout":"post","author":"chris","title":"Save Time with Bash Programmable Autocompletion","image":"/img/posts/bash.gif","excerpt":"<p>What follows is a short tutorial on bash autocompletion and a tiny bit of bash programming information. It assumes you have a working knowledge of programming, and at least passing familiarity with your terminal.</p>\n","date":"2018-01-08"},"cta":{"title":"What do you want to build?","subtitle":"We'd love to help. Let's find out how.","button":"Work with us"}},"__N_SSG":true}